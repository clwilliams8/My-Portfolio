<!DOCTYPE HTML>
<!--
	Editorial by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
-->
<html>
{% include "./partials/headPortfolioDetail.html" %}

<body class="is-preload">

    <!-- Wrapper -->
    <div id="wrapper">

        <!-- Main -->
        <div id="main">

            <div class="inner">

                <!-- Header -->
                {% include "./partials/header-socialLinks.html" %}

                <!-- Content -->
                <!-- Back button -->
                <a href="../portfolio.html" class="button" style="margin-top: 35px;"><i class="fas fa-chevron-left"></i> Back to portfolio</a>
                <section>
                    <header class="main">
                        <h1>Sunnybrook Software Company</h1>
                    </header>
                    <span class="image main"><img src="../images/portfolio/sunnybrook/logo.png" alt="" /></span>

                    <h2>About Sunnybrook Software Company</h2>
                    <p>Sunnybrook is a modern TMS software. It's a cloud-based software that is designed to help 3PL providers and brokers get shipments through the entire lifecycle.
                        It handles Shipments, Customers, Carriers, Factors, Locations, and Accouting as well as integrating with Quickbooks, Marcopoint and more.</p>

                    <hr class="major" />

                    <h2>About The Project</h2>
                    <!-- About us page of company here -->
                    <p><strong>Mission:</strong> The company was using another Fright Broker TMS software on the market called Descartes Aljex. The software was good enough for the company to grow to over 50 million in revenue in only 3 and a half years, handling over 300 shipments daily, but the software lacked some features and integrations that the company needed
                    to continue their growth and provide for this customer and carrier base. They wanted to build their very own TMS software not only to reach their own companies goals, but also to sell the software to the other 22,000 brokers across the country.
                    If you look at other TMS softwares that are currently on the market, almost all of them look old and clunky, as if they were built 10-20 years ago. We build the software over a year and half using the most modern web technologies and with intuituve
                    user interfaces and with user experience in mind. We wanted to accomplish all the things needed for all the different roles in the company: Capacity, Sales, Accounting and more... while reducing the load times and extra clicks needed to do the task
                    these users do on a daily basis. Also, in order to migrate existing brokers data to the new system, we needed a very good REST API to manage all content.</p>
                    <p><strong>Technologies Used:</strong> Laravel, Tenancy For Laravel, Vue.js, Bootstrap 5, Chart.js, Laravel Media Library, Meilisearch, Google Maps API, Google Geocoder API, Google Timezones API, Azure Blob Storage, Azure Active Directory, Azure Virtual Machines, Azure SQL Server Cloud, Postman</p>
                    <p><strong>Links</strong>
                        <ul style="margin-left: 28px; margin-top: -20px;">
                            <li style="padding-bottom: 7px;"><a href="https://laravel.com/" target="_blank">Laravel docs</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://tenancyforlaravel.com/docs/v3/introduction" target="_blank">Tenancy For Laravel</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://vuejs.org/guide/introduction.html" target="_blank">Vue.js docs</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/" target="_blank">Bootstrap 5 docs</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://www.chartjs.org/docs/latest/" target="_blank">Chart.js</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://spatie.be/docs/laravel-medialibrary/v11/introduction" target="_blank">Laravel Media Library docs</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://www.meilisearch.com/docs" target="_blank">Meilisearch docs</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://developers.google.com/maps/documentation" target="_blank">Google Maps API</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://developers.google.com/maps/documentation/geocoding/overview" target="_blank">Google Geocoder API</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://developers.google.com/maps/documentation/timezone/overview" target="_blank">Google Timezones API</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://learn.microsoft.com/en-us/azure/storage/blobs/storage-blobs-introduction" target="_blank">Azure Blob Storage</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://learn.microsoft.com/en-us/entra/identity/" target="_blank">Azure Active Directory</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://learn.microsoft.com/en-us/entra/identity/" target="_blank">Azure Active Directory</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://azure.microsoft.com/en-us/products/virtual-machines" target="_blank">Azure Virtual Machines</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://azure.microsoft.com/en-us/products/virtual-machines" target="_blank">Azure Virtual Machines</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://azure.microsoft.com/en-us/products/azure-sql" target="_blank">Azure SQL Server Cloud</a></li>
                            <li style="padding-bottom: 7px;"><a href="https://www.postman.com/" target="_blank">Postman</a></li>
                        </ul>
                    </p>

                    <h2>Summary</h2>
                    <!-- My testimonial here -->
                    <p>This was the biggest project of my career to date. I was on the project with several other developers over the year and a half that I worked on the project, and I ended up being the most experienced on the project
                        because people would come and go. I had two developer leads on the project. I helped the 2nd lead onboard to the project. I was responsible for delivering the weekly sprints and making sure the project was on track.
                        I wrote about 80% of the code on the project and saw it from start to finish. When I first started, we were writing all the migration files to structure the initial database, create the inital Eloquent models and relationships,
                        all the way to creating the inital user interfaces, all the way to MVP and launch. I created the Shipment, Customer, Carrier, Factors, and Location forms which were the core models of the application. I created the Shipment Status Lifecycle,
                        which is a series of over 20 status that a Shipment can be in based on if the Shipment has been accepted, covered by carrier, dispatched, en route to pickup, to delivery, to accounting review, to payment processing, to completed.
                        I build the accounting workflow which gave accounting users the ability to upload, review, and approve documents. The accounting system integrated with Quickbooks and automatically created invoices and payments based on the approved documents.
                        I created a reference table to the documents and were they were located in Azure Blob Storage.
                        I created PDF templates of the Sunnybrook invoices that were sent to Customers, and the Carrier Rate Confirmation and Carrier Invoices that were sent to Carriers. I then build out Tenancy For Laravel which gave us the ability to license the software
                        out to additional brokers with their own subdomain. I created the REST API that was used to migrate the data from the old system to the new system. I created the Google Maps API integration and Macropoint integrations so that we could track the shipments
                        and see where the truck was at in real time on a google map and which stop they en route to. This could be used by the brokerage to better communicate to their customers the status of their shipments. I also created a Shipment Status notification system
                        that Customers and Users could subscribe to to get email updates of the status of their Shipments. The Customer and Users assigned to those shipments could configure which status email updates they actually wanted and could opt in and out at anytime. The emails
                        templates were very modern and looked nice. I also created the Meilisearch integration which gave us the ability to search through all the content on the site. Everytime a model was saved, it would be indexed so that the Global
                        search bar could search through 100s of thousands and even millions of records in less than 100ms. I also created the Azure Active Directory integration which gave us the ability to have Single Sign On for all the users in the company. This way users didn't even
                        have to remember a password and it was much more secure. New employees didn't even have to create an account, it would automatically be created for them. I also created the Azure Virtual Machines and Azure SQL Server Cloud in our production and staging environments.
                        Towards the end of the project, I created the Dashboard page which used Chart.JS to chart out different reports for users to see what was going on for the day, the week, the month, the quarter, the current calendar year, or any custom date range.
                        We built reports for Margin vs Volumn, Newly Created Shipments, Top Customer Accounts and more. The cool thing is that as the user would change the frequency or date range, the page didn't have to reload because we would just make an API request with Vue.js
                        and Chart.js would update the graph with a smooth beautiful animation. It was a really slick dashboard that allowed the leaders in the company to see all the numbers they needed to know quickly and effectively to make better business decisions.<br><br>

                        This project was by far the largest project I had ever build in terms of number of models, features, integrations, and pretty much anything you can think of. I am very proud of my work on this project and hopefully it will help the entire country get their shipments faster
                        and more efficiently. I learned a lot about the logistics industry and how it works and it was an experience that I will never forget. :) 
                    </p>

                </section>
            </div>
        </div>

        <!-- Sidebar & Footer -->
        {% include "./partials/sidebar-footer.html" %}

    </div>

    <!-- Scripts -->
    {% include "./partials/scripts.html" %}
</body>

</html>